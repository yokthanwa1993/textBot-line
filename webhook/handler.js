import { middleware, validateSignature } from '@line/bot-sdk';
import { LineService } from '../services/lineService.js';
import { FlexMessageTemplates } from '../utils/flexMessages.js';

export class WebhookHandler {
  constructor(lineService) {
    this.lineService = lineService;
    this.config = {
      channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
      channelSecret: process.env.LINE_CHANNEL_SECRET,
    };
  }

  // Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature
  getMiddleware() {
    return middleware(this.config);
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ webhook events
  async handleEvents(events) {
    const results = await Promise.all(
      events.map(event => this.handleEvent(event))
    );
    return results;
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
  async handleEvent(event) {
    console.log('Received event:', JSON.stringify(event, null, 2));

    switch (event.type) {
      case 'message':
        return await this.handleMessage(event);
      case 'follow':
        return await this.handleFollow(event);
      case 'unfollow':
        return await this.handleUnfollow(event);
      case 'join':
        return await this.handleJoin(event);
      case 'leave':
        return await this.handleLeave(event);
      case 'memberJoined':
        return await this.handleMemberJoined(event);
      case 'memberLeft':
        return await this.handleMemberLeft(event);
      case 'postback':
        return await this.handlePostback(event);
      case 'beacon':
        return await this.handleBeacon(event);
      case 'accountLink':
        return await this.handleAccountLink(event);
      case 'things':
        return await this.handleThings(event);
      default:
        console.log('Unknown event type:', event.type);
        return null;
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  async handleMessage(event) {
    const { replyToken, message, source } = event;
    const userId = source.userId;

    switch (message.type) {
      case 'text':
        return await this.handleTextMessage(event);
      case 'image':
        return await this.handleImageMessage(replyToken, message, userId);
      case 'video':
        return await this.handleVideoMessage(replyToken, message, userId);
      case 'audio':
        return await this.handleAudioMessage(replyToken, message, userId);
      case 'file':
        return await this.handleFileMessage(replyToken, message, userId);
      case 'location':
        return await this.handleLocationMessage(replyToken, message, userId);
      case 'sticker':
        return await this.handleStickerMessage(replyToken, message, userId);
      default:
        console.log('Unknown message type:', message.type);
        return null;
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  async handleTextMessage(event) {
    const { text } = event.message;
    const { replyToken, source } = event;
    const userId = source?.userId || 'unknown-user';
    
    console.log(`Received text message from ${userId}: ${text}`);
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ messageId
    const savedMessage = this.lineService.addMessage(text, userId);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reply token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test mode
    if (!replyToken || replyToken === 'test-token-123') {
      console.log('Test message, skipping reply');
      return { success: true, message: 'Message received (test mode)', sentMessages: 0 };
    }
    
    const timestamp = new Date().toISOString();
    const flexContents = FlexMessageTemplates.createLiffMessageFlex(text, userId, timestamp, savedMessage.id);
    const altText = `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${text}`;

    try {
      const result = await this.lineService.replyFlexMessage(replyToken, altText, flexContents);
      console.log('Flex reply result:', result);
      return result;
    } catch (error) {
      console.error('Error replying with flex message:', error);
      // Fallback to text message if flex fails
      try {
        const fallbackText = `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "${text}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‚úÖ`;
        const result = await this.lineService.replyMessage(replyToken, fallbackText);
        console.log('Fallback text reply result:', result);
        return result;
      } catch (fallbackError) {
        console.error('Error with fallback text reply:', fallbackError);
        return { success: false, message: `Failed to reply: ${fallbackError.message}`, sentMessages: 0 };
      }
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  async handleImageMessage(replyToken, message, userId) {
    console.log(`Image message from ${userId}, messageId: ${message.id}`);
    
    try {
      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE
      const imageBuffer = await this.lineService.getMessageContent(message.id);
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
      const base64Image = imageBuffer.toString('base64');
      const dataUrl = `data:image/jpeg;base64,${base64Image}`;
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OCR API ‡∏ú‡πà‡∏≤‡∏ô external service ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á base64
      const ocrResponse = await fetch('https://ocr.wwoom.com/api', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          base64: dataUrl
        })
      });
      
      if (!ocrResponse.ok) {
        throw new Error(`OCR API error: ${ocrResponse.status}`);
      }
      
      const ocrResult = await ocrResponse.json();
      const timestamp = new Date().toISOString();
      
      // ‡∏õ‡∏£‡∏±‡∏ö format ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö API response
      const formattedResult = {
        success: ocrResult.text && ocrResult.text.trim() !== '',
        text: ocrResult.text || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
        wordCount: ocrResult.text ? ocrResult.text.split(/\s+/).length : 0
      };

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° EDIT
      const savedMessage = this.lineService.addMessage(formattedResult.text, userId);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå OCR
      const flexContents = FlexMessageTemplates.createOCRResultFlex(formattedResult.text, savedMessage.id, userId);
      const altText = formattedResult.success 
        ? `OCR ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ${formattedResult.text.substring(0, 50)}${formattedResult.text.length > 50 ? '...' : ''}`
        : 'OCR ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û';

      try {
        // ‡∏™‡πà‡∏á Flex Message
        const result = await this.lineService.replyFlexMessage(replyToken, altText, flexContents);
        console.log('OCR Flex reply result:', result);
        return result;
      } catch (flexError) {
        console.error('Error replying with OCR flex message:', flexError);
        
        // Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ text message ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        if (formattedResult.success && formattedResult.text) {
          const fallbackText = `üìÑ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:\n\n${formattedResult.text}`;
          return await this.lineService.replyMessage(replyToken, fallbackText);
        } else {
          return await this.lineService.replyMessage(replyToken, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö');
        }
      }
      
    } catch (error) {
      console.error('Error processing image with OCR:', error);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error
      const errorResult = {
        success: false,
        text: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`,
        wordCount: 0
      };
      
      try {
        const flexContents = FlexMessageTemplates.createOCRResultFlex(errorResult.text, null, userId);
        const altText = 'OCR ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û';
        return await this.lineService.replyFlexMessage(replyToken, altText, flexContents);
      } catch (flexError) {
        // Fallback ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        return await this.lineService.replyMessage(replyToken, '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
  async handleVideoMessage(replyToken, message, userId) {
    console.log(`Video message from ${userId}`);
    return await this.lineService.replyMessage(replyToken, '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! üé•');
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  async handleAudioMessage(replyToken, message, userId) {
    console.log(`Audio message from ${userId}`);
    return await this.lineService.replyMessage(replyToken, '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! üéµ');
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
  async handleFileMessage(replyToken, message, userId) {
    console.log(`File message from ${userId}:`, message.fileName);
    return await this.lineService.replyMessage(replyToken, `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå "${message.fileName}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! üìÑ`);
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  async handleLocationMessage(replyToken, message, userId) {
    const { title, address, latitude, longitude } = message;
    console.log(`Location from ${userId}: ${title} at ${latitude}, ${longitude}`);
    return await this.lineService.replyMessage(replyToken, `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á "${title}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! üìç`);
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå
  async handleStickerMessage(replyToken, message, userId) {
    console.log(`Sticker from ${userId}: ${message.packageId}/${message.stickerId}`);
    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå
    return await this.lineService.replyMessage(replyToken, '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏±‡∏ö! üòä');
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ follow
  async handleFollow(event) {
    const userId = event.source.userId;
    console.log(`User ${userId} followed the bot`);
    
    const welcomeMessage = '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö! üéâ\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö';
    return await this.lineService.replyMessage(event.replyToken, welcomeMessage);
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ unfollow
  async handleUnfollow(event) {
    const userId = event.source.userId;
    console.log(`User ${userId} unfollowed the bot`);
    // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà unfollow ‡πÅ‡∏•‡πâ‡∏ß
    return null;
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
  async handleJoin(event) {
    const { groupId, roomId } = event.source;
    console.log(`Bot joined group/room: ${groupId || roomId}`);
    
    const welcomeMessage = '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏¥‡∏ç‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ü§ñ';
    return await this.lineService.replyMessage(event.replyToken, welcomeMessage);
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
  async handleLeave(event) {
    const { groupId, roomId } = event.source;
    console.log(`Bot left group/room: ${groupId || roomId}`);
    return null;
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
  async handleMemberJoined(event) {
    console.log('Member joined:', event.joined.members);
    const welcomeMessage = '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö! üëã';
    return await this.lineService.replyMessage(event.replyToken, welcomeMessage);
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
  async handleMemberLeft(event) {
    console.log('Member left:', event.left.members);
    return null;
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback
  async handlePostback(event) {
    const { data, params } = event.postback;
    console.log(`Postback data: ${data}`, params);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reply token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test mode
    if (!event.replyToken || event.replyToken === 'test-reply-token') {
      console.log('Test postback, skipping reply');
      return { success: true, message: 'Postback received (test mode)', sentMessages: 0 };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö action
    if (data.startsWith('action=save_and_open_liff')) {
      const urlParams = new URLSearchParams(data.replace('action=save_and_open_liff&', ''));
      const msg = urlParams.get('message') || '';
      const uid = urlParams.get('userId') || '';
      const mid = urlParams.get('messageId') || '';
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      await this.lineService.addMessage(msg, uid);
      // ‡∏™‡πà‡∏á Flex Message ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      const ts = new Date().toISOString(); // ‡πÉ‡∏ä‡πâ ISO string ‡πÅ‡∏ó‡∏ô
      const flex = FlexMessageTemplates.createTextResultFlex(msg, uid, ts, mid);
      const alt = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß';
      return await this.lineService.replyFlexMessage(event.replyToken, alt, flex);
    } else if (data.startsWith('action=save_and_close_liff')) {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏¥‡∏î LIFF ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á Flex Message ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      const params = new URLSearchParams(data.replace('action=save_and_close_liff&', ''));
      const msg = params.get('message') || '';
      const uid = params.get('userId') || '';
      const mid = params.get('messageId') || '';
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô
      const savedMessage = await this.lineService.addMessage(msg, uid);
      console.log('=== SAVE_AND_CLOSE_LIFF DEBUG ===');
      console.log('Message:', msg);
      console.log('UserId:', uid);
      console.log('SavedMessage:', savedMessage);
      
      const ts = new Date().toISOString();
      const flex = FlexMessageTemplates.createEditResultFlex(msg, uid, ts, savedMessage.id);
      console.log('Generated Flex:', JSON.stringify(flex, null, 2));
      const alt = '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      console.log('Alt text:', alt);
      
      const result = await this.lineService.replyFlexMessage(event.replyToken, alt, flex);
      console.log('Reply result:', result);
      return result;
    } else {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
      const replyMessage = `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö postback: ${data}`;
      return await this.lineService.replyMessage(event.replyToken, replyMessage);
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ beacon
  async handleBeacon(event) {
    const { hwid, type } = event.beacon;
    console.log(`Beacon event: ${type} from ${hwid}`);
    
    const replyMessage = '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Beacon ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! üì°';
    return await this.lineService.replyMessage(event.replyToken, replyMessage);
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ account link
  async handleAccountLink(event) {
    const { result, nonce } = event.link;
    console.log(`Account link: ${result}, nonce: ${nonce}`);
    
    const replyMessage = result === 'ok' ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‚úÖ' : '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå';
    return await this.lineService.replyMessage(event.replyToken, replyMessage);
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ LINE Things
  async handleThings(event) {
    console.log('LINE Things event:', event.things);
    const replyMessage = '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LINE Things ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! üîó';
    return await this.lineService.replyMessage(event.replyToken, replyMessage);
  }
}